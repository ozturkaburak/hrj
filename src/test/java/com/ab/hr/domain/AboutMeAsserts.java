package com.ab.hr.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AboutMeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAboutMeAllPropertiesEquals(AboutMe expected, AboutMe actual) {
        assertAboutMeAutoGeneratedPropertiesEquals(expected, actual);
        assertAboutMeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAboutMeAllUpdatablePropertiesEquals(AboutMe expected, AboutMe actual) {
        assertAboutMeUpdatableFieldsEquals(expected, actual);
        assertAboutMeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAboutMeAutoGeneratedPropertiesEquals(AboutMe expected, AboutMe actual) {
        assertThat(expected)
            .as("Verify AboutMe auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAboutMeUpdatableFieldsEquals(AboutMe expected, AboutMe actual) {
        assertThat(expected)
            .as("Verify AboutMe relevant properties")
            .satisfies(e -> assertThat(e.getSocialMedia()).as("check socialMedia").isEqualTo(actual.getSocialMedia()))
            .satisfies(e -> assertThat(e.getUrl()).as("check url").isEqualTo(actual.getUrl()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAboutMeUpdatableRelationshipsEquals(AboutMe expected, AboutMe actual) {
        assertThat(expected)
            .as("Verify AboutMe relationships")
            .satisfies(e -> assertThat(e.getUserProfile()).as("check userProfile").isEqualTo(actual.getUserProfile()));
    }
}
