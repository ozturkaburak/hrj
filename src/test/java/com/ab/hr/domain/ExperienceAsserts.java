package com.ab.hr.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExperienceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceAllPropertiesEquals(Experience expected, Experience actual) {
        assertExperienceAutoGeneratedPropertiesEquals(expected, actual);
        assertExperienceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceAllUpdatablePropertiesEquals(Experience expected, Experience actual) {
        assertExperienceUpdatableFieldsEquals(expected, actual);
        assertExperienceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceAutoGeneratedPropertiesEquals(Experience expected, Experience actual) {
        assertThat(expected)
            .as("Verify Experience auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceUpdatableFieldsEquals(Experience expected, Experience actual) {
        assertThat(expected)
            .as("Verify Experience relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getCompanyName()).as("check companyName").isEqualTo(actual.getCompanyName()))
            .satisfies(e -> assertThat(e.getWorkType()).as("check workType").isEqualTo(actual.getWorkType()))
            .satisfies(e -> assertThat(e.getContractType()).as("check contractType").isEqualTo(actual.getContractType()))
            .satisfies(e -> assertThat(e.getOfficeLocation()).as("check officeLocation").isEqualTo(actual.getOfficeLocation()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExperienceUpdatableRelationshipsEquals(Experience expected, Experience actual) {
        assertThat(expected)
            .as("Verify Experience relationships")
            .satisfies(e -> assertThat(e.getUserProfile()).as("check userProfile").isEqualTo(actual.getUserProfile()));
    }
}
