package com.ab.hr.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EducationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEducationAllPropertiesEquals(Education expected, Education actual) {
        assertEducationAutoGeneratedPropertiesEquals(expected, actual);
        assertEducationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEducationAllUpdatablePropertiesEquals(Education expected, Education actual) {
        assertEducationUpdatableFieldsEquals(expected, actual);
        assertEducationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEducationAutoGeneratedPropertiesEquals(Education expected, Education actual) {
        assertThat(expected)
            .as("Verify Education auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEducationUpdatableFieldsEquals(Education expected, Education actual) {
        assertThat(expected)
            .as("Verify Education relevant properties")
            .satisfies(e -> assertThat(e.getSchoolName()).as("check schoolName").isEqualTo(actual.getSchoolName()))
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getDegree()).as("check degree").isEqualTo(actual.getDegree()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getActivities()).as("check activities").isEqualTo(actual.getActivities()))
            .satisfies(e -> assertThat(e.getClubs()).as("check clubs").isEqualTo(actual.getClubs()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEducationUpdatableRelationshipsEquals(Education expected, Education actual) {
        assertThat(expected)
            .as("Verify Education relationships")
            .satisfies(e -> assertThat(e.getUserProfile()).as("check userProfile").isEqualTo(actual.getUserProfile()));
    }
}
