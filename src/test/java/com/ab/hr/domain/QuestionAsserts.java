package com.ab.hr.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QuestionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAllPropertiesEquals(Question expected, Question actual) {
        assertQuestionAutoGeneratedPropertiesEquals(expected, actual);
        assertQuestionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAllUpdatablePropertiesEquals(Question expected, Question actual) {
        assertQuestionUpdatableFieldsEquals(expected, actual);
        assertQuestionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAutoGeneratedPropertiesEquals(Question expected, Question actual) {
        assertThat(expected)
            .as("Verify Question auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionUpdatableFieldsEquals(Question expected, Question actual) {
        assertThat(expected)
            .as("Verify Question relevant properties")
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getOptions()).as("check options").isEqualTo(actual.getOptions()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getCorrectAnswer()).as("check correctAnswer").isEqualTo(actual.getCorrectAnswer()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionUpdatableRelationshipsEquals(Question expected, Question actual) {
        assertThat(expected)
            .as("Verify Question relationships")
            .satisfies(e -> assertThat(e.getAssignments()).as("check assignments").isEqualTo(actual.getAssignments()));
    }
}
